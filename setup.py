# File: setup.py
# Interactive setup script for Alice Insight Suite
# Run this after cloning the repository to get everything configured

import os
import secrets
import sqlite3
from pathlib import Path

def print_header():
    """Print a welcome header."""
    print("=" * 60)
    print("🚀 Alice Insight Suite - Setup Script")
    print("=" * 60)
    print("This script will help you configure Alice Insight Suite")
    print("for the first time.\n")

def check_requirements():
    """Check if required files exist."""
    print("📋 Checking requirements...")
    
    issues = []
    
    # Check if we're in the right directory
    if not os.path.exists('run.py'):
        issues.append("run.py not found - are you in the correct directory?")
    
    if not os.path.exists('app'):
        issues.append("app directory not found - missing application files")
    
    if not os.path.exists('requirements.txt'):
        issues.append("requirements.txt not found - install dependencies manually")
    
    if issues:
        print("❌ Issues found:")
        for issue in issues:
            print(f"   - {issue}")
        return False
    
    print("✅ All required files found")
    return True

def create_env_file():
    """Create .env file from template."""
    print("\n🔧 Setting up environment configuration...")
    
    if os.path.exists('.env'):
        overwrite = input("📝 .env file already exists. Overwrite? (y/N): ").lower()
        if overwrite != 'y':
            print("   Skipping .env creation")
            return True
    
    # Generate a secure secret key
    secret_key = secrets.token_urlsafe(32)
    
    print("\n🔑 API Key Configuration:")
    print("   For full functionality, you'll need a YouTube API key.")
    print("   You can set this up now or add it to .env later.\n")
    
    # Get YouTube API key
    youtube_key = input("📺 Enter your YouTube API key (or press Enter to skip): ").strip()
    if not youtube_key:
        youtube_key = "your_youtube_api_key_here"
        print("   ⚠️  YouTube API key not provided - real video data will not work")
    
    # Get optional IBM keys
    print("\n🤖 Optional: IBM Watson services for advanced AI features")
    ibm_nlu_key = input("🧠 IBM NLU API key (press Enter to skip): ").strip()
    ibm_nlu_url = input("🔗 IBM NLU URL (press Enter to skip): ").strip()
    
    # Create .env content
    env_content = f"""# Alice Insight Suite Configuration
# Generated by setup.py

# ===== FLASK CONFIGURATION =====
SECRET_KEY={secret_key}
FLASK_DEBUG=True
FLASK_HOST=0.0.0.0
FLASK_PORT=5001
DATABASE_PATH=alice_insight.db

# ===== YOUTUBE DATA API v3 =====
YOUTUBE_API_KEY={youtube_key}

# ===== IBM WATSON NLU (OPTIONAL) =====
IBM_NLU_API_KEY={ibm_nlu_key or 'your_ibm_nlu_api_key'}
IBM_NLU_URL={ibm_nlu_url or 'your_ibm_nlu_url'}
IBM_NLU_VERSION=2022-04-07

# ===== IBM WATSONX.AI (OPTIONAL) =====
IBM_WATSONX_API_KEY=your_watsonx_api_key
IBM_WATSONX_PROJECT_ID=your_project_id
IBM_WATSONX_URL=https://us-south.ml.cloud.ibm.com

# ===== LOGGING =====
LOG_LEVEL=INFO
LOG_TO_FILE=False
LOG_FILE_PATH=alice_insight.log
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("✅ .env file created successfully")
        return True
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")
        return False

def setup_database():
    """Initialize the database."""
    print("\n💾 Setting up database...")
    
    db_path = 'alice_insight.db'
    
    if os.path.exists(db_path):
        migrate = input(f"📂 Database {db_path} already exists. Run migration? (Y/n): ").lower()
        if migrate != 'n':
            # Run migration
            try:
                from database_migration import migrate_database
                if migrate_database(db_path):
                    print("✅ Database migration completed")
                    return True
                else:
                    print("❌ Database migration failed")
                    return False
            except ImportError:
                print("⚠️  Migration script not found, running basic setup...")
    
    # Initialize new database
    try:
        # Import and run database initialization
        import sys
        sys.path.append('app')
        
        from app.database import init_db
        from app import create_app
        
        app = create_app()
        with app.app_context():
            init_db()
        
        print("✅ Database initialized successfully")
        return True
        
    except Exception as e:
        print(f"❌ Database setup failed: {e}")
        return False

def verify_setup():
    """Verify that the setup was successful."""
    print("\n🔍 Verifying setup...")
    
    try:
        # Import config and check
        from config import Config
        is_valid, missing, warnings = Config.validate_configuration()
        
        if is_valid:
            print("✅ Configuration is valid")
        else:
            print("⚠️  Configuration issues found:")
            for item in missing:
                print(f"   - Missing: {item}")
        
        if warnings:
            print("   Warnings:")
            for warning in warnings:
                print(f"   - {warning}")
        
        # Check database
        if os.path.exists('alice_insight.db'):
            print("✅ Database file exists")
        else:
            print("❌ Database file not found")
            return False
        
        return True
        
    except Exception as e:
        print(f"❌ Verification failed: {e}")
        return False

def show_next_steps():
    """Show what to do next."""
    print("\n" + "=" * 60)
    print("🎉 Setup Complete!")
    print("=" * 60)
    
    print("\n📝 Next Steps:")
    print("1. Install dependencies:")
    print("   pip install -r requirements.txt")
    print("\n2. Start the application:")
    print("   python run.py")
    print("\n3. Open your browser and go to:")
    print("   http://localhost:5001")
    print("\n4. Login with demo credentials:")
    print("   Email: demo@alice.io")
    print("   Password: password123")
    print("\n5. Go to 'My Channel' and connect your YouTube channel")
    
    print("\n🔧 Configuration Tips:")
    if not os.getenv('YOUTUBE_API_KEY') or 'your_youtube_api_key_here' in open('.env').read():
        print("   • Set up YouTube API key for real video data")
        print("     Guide: https://developers.google.com/youtube/v3/getting-started")
    
    print("   • Edit .env file to add more API keys")
    print("   • Check config.py for advanced settings")
    
    print("\n📚 Documentation:")
    print("   • README.md - Full setup guide")
    print("   • config.py - Configuration options")
    print("   • app/ - Application source code")
    
    print("\n🐛 Issues?")
    print("   • Check the console for error messages")
    print("   • Verify your API keys are correct")
    print("   • Make sure all dependencies are installed")

def main():
    """Main setup function."""
    print_header()
    
    # Check requirements
    if not check_requirements():
        print("\n❌ Setup cannot continue due to missing requirements.")
        return False
    
    # Create .env file
    if not create_env_file():
        print("\n❌ Setup failed during environment configuration.")
        return False
    
    # Setup database
    if not setup_database():
        print("\n❌ Setup failed during database initialization.")
        return False
    
    # Verify setup
    if not verify_setup():
        print("\n⚠️  Setup completed with warnings.")
    
    # Show next steps
    show_next_steps()
    
    return True

if __name__ == '__main__':
    try:
        success = main()
        exit_code = 0 if success else 1
        exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n🛑 Setup interrupted by user")
        exit(1)
    except Exception as e:
        print(f"\n💥 Unexpected error: {e}")
        exit(1)